{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1}],"Cache":[{"_id":"themes/pure/.gitignore","hash":"204766bf9e2d6fe1fce5b9b02b8edfac2d235830","modified":1578475239379},{"_id":"themes/pure/_config.yml","hash":"f8eef9b78ccffed34e1f5e05955fcb0a4d51180c","modified":1587880168994},{"_id":"themes/pure/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1578475239379},{"_id":"themes/pure/package.json","hash":"d5bad0f074925c46e8ee5a75d385346d2fcea850","modified":1578475239424},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1587867922269},{"_id":"themes/pure/README.cn.md","hash":"7facc2f8aadaf4c172dfc931bebcc37b9ef3d7e8","modified":1578475239380},{"_id":"themes/pure/_config.yml.example","hash":"a3b55d01598967db40da6f740b38cdba4f17d7bc","modified":1578475239382},{"_id":"themes/pure/README.md","hash":"94fe451bf920cec6152e7bf9cbff4ccf0af0febc","modified":1578475239380},{"_id":"themes/pure/languages/default.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1578475239388},{"_id":"themes/pure/languages/en.yml","hash":"ed342f9158f13fafaf51baa4cc89df4d8aa31720","modified":1578475239389},{"_id":"themes/pure/languages/zh-CN.yml","hash":"399061d959807b41e333808b4c7851ca290a82fe","modified":1578475239389},{"_id":"themes/pure/languages/zh-TW.yml","hash":"387ad2ca1b2a01dac36f768a6116a2033c3ac142","modified":1578475239390},{"_id":"themes/pure/layout/about.ejs","hash":"4b64515ccc801cc9eba637a1e1909c6c4dd203f6","modified":1578475239419},{"_id":"themes/pure/layout/archive.ejs","hash":"90fa5b0d8f081d0bde33b2784f66e6a80e5b0dac","modified":1578475239419},{"_id":"themes/pure/layout/books.ejs","hash":"75cbd31d3551c730e8a683bd5b08562881a95b51","modified":1578475239419},{"_id":"themes/pure/layout/categories.ejs","hash":"9cc7b5f5af40fd7ec641bf0f5a5f8f1ce1ac22d5","modified":1578475239420},{"_id":"themes/pure/layout/category.ejs","hash":"b3f7a96fbaf201a65ed64d509edc29976542fbfb","modified":1578475239420},{"_id":"themes/pure/layout/index.ejs","hash":"44418dbf1fb82392b8e1e4cc910d16a383190433","modified":1578475239421},{"_id":"themes/pure/layout/layout.ejs","hash":"71bdeba7b8be0c4f56a87ad05da2c6d4254da55e","modified":1578475239421},{"_id":"themes/pure/layout/links.ejs","hash":"ee90a5f2a9d19bc02682ea3a59177b947f7f7284","modified":1578475239421},{"_id":"themes/pure/layout/page.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1578475239422},{"_id":"themes/pure/layout/repository.ejs","hash":"0ecad33b6c1ec741eb3b02bb47a3824ac3749d09","modified":1578475239423},{"_id":"themes/pure/layout/post.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1578475239422},{"_id":"themes/pure/layout/tags.ejs","hash":"76bc71f3dfd8a5b1aa14b09dec7b460b14f5028a","modified":1578475239424},{"_id":"themes/pure/layout/tag.ejs","hash":"30d8ddd84c9aa87dff1be02af308097cf4e72448","modified":1578475239423},{"_id":"themes/pure/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1578475239451},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1578475239428},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1578475239426},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1578475239456},{"_id":"themes/pure/_source/404/index.md","hash":"16638b081d796638565ca462f3c87339b9a0577e","modified":1578475239383},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1578475239383},{"_id":"themes/pure/_source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1578475239383},{"_id":"themes/pure/_source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1578475239384},{"_id":"themes/pure/_source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1578475239385},{"_id":"themes/pure/_source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1578475239386},{"_id":"themes/pure/_source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1578475239385},{"_id":"themes/pure/_source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1578475239386},{"_id":"themes/pure/_source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1578475239387},{"_id":"themes/pure/layout/_common/head.ejs","hash":"4135b80c40cc970f9dc30fdd02e4f3e0a8b0af67","modified":1578475239391},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"caec54ce31577207e1fd31aefa017bde99a8027c","modified":1578475239391},{"_id":"themes/pure/layout/_common/header.ejs","hash":"c05070274965692a270c7e07ad9f4dad6f2c5888","modified":1578475239392},{"_id":"themes/pure/layout/_common/script.ejs","hash":"3045da0c1979946694b628fbef39c01cc98b6e75","modified":1578475239392},{"_id":"themes/pure/layout/_common/social.ejs","hash":"2bcdc7b0ee3905e724b01c2efa1ca6b47a846e1f","modified":1578475239392},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"944913dcabd09c10d3014c844abf851f4dfdba8d","modified":1578475239393},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"4be88eec64fd40c7e1b74df8ccb6c8cdfa3e7a17","modified":1578475239394},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"a8a387f9e7289a6524cf46d7ab76c34fff37f4bf","modified":1578475239394},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"e4810f8e03986d5a8afdf4c0932814a3d0db9ffe","modified":1578475239394},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"513892fae41de4e68963c95a9358285714274bb4","modified":1578475239395},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"6408e37ec1a8ee868cf36d5b0e020d5d97ea2f27","modified":1578475239396},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"db8cba32bf6655a8d21fe8c8ccd0695b049e1d4c","modified":1578475239396},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"c196b54f92eff017a48e02bacc029dd82edc8cf9","modified":1578475239397},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"47bbb53fe9cca05928c45782c6897c8a94d597ff","modified":1578475239397},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"8af3bcfc07c344cefa0655dbe83f3c1a55954899","modified":1578475239398},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"fdc5ac554e375f2e8b1e4dbe77cedda692f1228e","modified":1578475239398},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"bae5b4eb8b6415dc988bda88be1c4f8e252b1844","modified":1578475239398},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"be30d7eb0b391759ac329b8a7b410d758ff8b032","modified":1578475239405},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"335a906404dada013d83508244e992c7a26fa879","modified":1578475239405},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"a6662f79f7fd6f1cc9b5180672ba8e1d0192fbe2","modified":1578475239405},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"db2967c6902ceb67caa70364935ef3441b10432f","modified":1578475239410},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"d5c98ab345952bb11d9ee69a9c1e3432b6760c55","modified":1578475239410},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"1e4bad0e7d04352e3634994f413c16b0001efa4a","modified":1578475239411},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"4558b5713926735d874deb14d8b21ed2e597b714","modified":1578475239412},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"7a64d98212769423425102a441fca52eb6930fff","modified":1578475239412},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"a464706b7a903e25d34b104bdfb298b260abc132","modified":1578475239412},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"e2f8ba48f7a659c74d5fc38930b873c167671044","modified":1578475239413},{"_id":"themes/pure/layout/_script/search.ejs","hash":"2b784d15581df4309f56682896b725da7d44fcdd","modified":1578475239413},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"89848cc8e0190ca76cc26d42c6880a23e370702e","modified":1578475239414},{"_id":"themes/pure/layout/_search/index.ejs","hash":"2c1f06dac5710e5fd073f3e5739545f3f6a0a56f","modified":1578475239414},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"5e9a5cc9bdc05fabf939db494c3937cc0df48a72","modified":1578475239414},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"14b1ec0bdb911ab6d92046c78d371264afc4fb19","modified":1578475239415},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"dc548a83c33b5a598683bf2e1cb723bc3be4a76b","modified":1578475239415},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"b250fb0f63286f9648cd8bf428bed6a88901b481","modified":1578475239416},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"9811bab46dcf436c6d05ae78acd62bc25751df78","modified":1578475239417},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"83c8ce4b099951d58b2be5006f6963afbbe7d4e9","modified":1578475239417},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8932ce5283a7e6a356c6840104a7d6984f2ea986","modified":1578475239417},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"24823a881a6c15fd846c7f4780eb90fe869a813b","modified":1578475239418},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"e6967ec160b93a5f466a73a36745833e644d04c0","modified":1578475239418},{"_id":"themes/pure/source/fonts/README.md","hash":"b5b2aac1b36a86dac2217d242d650e026c5a3b0c","modified":1578475239457},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1578475239433},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1578475239458},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1578475239431},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1578475239462},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1578475239467},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1578475239461},{"_id":"themes/pure/source/js/application.js","hash":"c29f52f5ed2d1a5d8185b115f2962d22e707e19e","modified":1578475239469},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1578475239469},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1578475239468},{"_id":"themes/pure/source/js/insight.js","hash":"a1b773d9ce470bf0e2f8fdca1b6fac2ac3d31aeb","modified":1578475239470},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1578475239464},{"_id":"themes/pure/source/js/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1578475239472},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"20ef0d47ec3d2de7d94db9778ddac092dc2bd4b5","modified":1578475239399},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"0ef132fc45042b28411e3334e77b6e2a7f47fae2","modified":1578475239400},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"e2180ba37bd5ec5d774e50e49e48daf086676db6","modified":1578475239400},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"8cbaef422bd7f3d1581d1198dd1c36e4c0e1e46e","modified":1578475239400},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"bdef9836ca91b3e45498a9d98bcaec69e6627ced","modified":1578475239401},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1578475239401},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"15255c9b1644a79be097f6af26f0317a507b0690","modified":1578475239402},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"946f4bcfa5e5dc4d60c05916c8187bd2c06d1a95","modified":1578475239402},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"8fd470b8d52606a90d475f7da9dbbed32742b1c9","modified":1578475239403},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"0d8b9a3aeaed95b74e292c593f0a8225711bfdca","modified":1578475239403},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1578475239404},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"81e9a89734505f54fef83dc74d2e277dab1bfa75","modified":1578475239404},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"829778c19025882fe73cf1b297a36a9d0eff39a1","modified":1578475239406},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"4557389e499b89982eb005a821208fdd3dbac627","modified":1578475239407},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"19585fc666e13a2816d74a8046998ac7fd36f75c","modified":1578475239407},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"98dac12a9cbf47098b49183893d714355e2e5999","modified":1578475239408},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"6234ef13a1290f8849ca850641c0be0ab6af8cef","modified":1578475239408},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"0af71b5b354fdddd576fbd55c3aeb0221af71e7d","modified":1578475239408},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"2cc7b1cb7bdf157fe6470eb34a613963df75afa3","modified":1578475239408},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"19120669bfea521e0b9d2df5bf3a34f0ecb8bb68","modified":1578475239408},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"96fcc36560a8367e6c4ba9ec1e82d0c5a730b1b4","modified":1578475239409},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"72b48dcaab830b615c71f6e810e96100b715c682","modified":1578475239409},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"f95c3289c03fa084afce64e3c399cb5127707f56","modified":1578475239410},{"_id":"themes/pure/source/css/style.css","hash":"ff0731ff99c03b9120a60e1a70df78d209f7cbf4","modified":1578475239454},{"_id":"themes/pure/source/css/style.min.css","hash":"4e46cbfadf9f0c5c236239a163058a3f525492ce","modified":1578475239455},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1578475239460},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1578475239465},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1578475239466},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1578475239467},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1578475239467},{"_id":"themes/pure/source/js/plugin.min.js","hash":"4eded164f8b6f5187fbf10065873ebeee5ab8787","modified":1578475239479},{"_id":"themes/pure/source/js/plugin.js","hash":"59cb2985d8d21653f0f80ef327517eca86af0ac6","modified":1578475239474},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1578475239465},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1578475239477},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1578475239430},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1578475239449},{"_id":"source/_posts/利用canvas玩转图片.md","hash":"4f5c23303c9bd2ac72ddac8f3a3389d40804bb3d","modified":1587881037073},{"_id":"public/archives/index.html","hash":"ef184e3a00daa36864f3237c30d3ee7c1aa5cdfa","modified":1587881083009},{"_id":"public/archives/2020/index.html","hash":"344df229b31ac92a60c318bbdf6a66d67016cf5e","modified":1587881083009},{"_id":"public/archives/2020/04/index.html","hash":"8e02cb4715bde2536c8f048c32f521b2e73d77ae","modified":1587881083009},{"_id":"public/2020/04/26/利用canvas玩转图片/index.html","hash":"75d86b0fecf45cc51205c66f8429e57031048e81","modified":1587881083009},{"_id":"public/2020/04/26/hello-world/index.html","hash":"01647629a9dea49bb08ffc8e5f8b182014d36ab5","modified":1587881083009},{"_id":"public/index.html","hash":"5bb99d9e1dec36a3358d22004a57083c1c99bc32","modified":1587881083009},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1587881083009},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1587881083009},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1587881083009},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1587881083009},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1587881083009},{"_id":"public/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1587881083009},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1587881083009},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1587881083009},{"_id":"public/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1587881083009},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1587881083009},{"_id":"public/images/donate/wechatpayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1587881083009},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1587881083009},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1587881083009},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1587881083009},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1587881083009},{"_id":"public/fonts/README.html","hash":"7c1128fed284d2fb7fee743e8a739da99385b358","modified":1587881083009},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1587881083009},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1587881083009},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1587881083009},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1587881083009},{"_id":"public/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1587881083009},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1587881083009},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1587881083009}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-04-26T02:25:22.268Z","updated":"2020-04-26T02:25:22.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9gmo3q30000novh75t7gtar","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"_content":"## 介绍\n\n`canvas`是`H5`中新加的一个标签\n\nhtml\n\n```\n<canvas width='1200' height='800'> </canvas>\n```\n\n标签主要的属性如图,仅需`width`和`height`两个\n\n就俩? 看着很简单不是? 当然不是 ╮(╯▽╰)╭ , 因为`canvas`是一个需要和`js`结合使用的标签\n\nhtml\n\n```\n<body>\n    <canvas width='1200' height='800' id='canvas'> </canvas>\n</body>\n\n<script>\n    const canvas = document.getElementById('canvas')\n    const ctx = canvas.getContext('2d') // 2d ? 有3d咩 ? 有 => webgl :)\n    ...\n</script>\n```\n\n`canvas`拿的是画板, `ctx`拿的是画笔, 画图主要的是通过画笔不是, 所以我们使用的也基本上是`ctx`身上的属性和方法, `ctx`身上有许多画图的方法:\n\n- 画线的 `lineTo(x, y)`\n- 画矩形的 `rect(x, y, width, height)`\n- 画弧 / 圆的 `arc(x, y, r, startAng, endAng, true/false)`\n- 画文本的 `fillText('Hello World!')`\n- 画图片的 `drawImage(imgData, x, y, width, height)`\n- …\n\n以上只是简写, 有许多细节并未说明, 想细学的可以去\n\n[w3c](https://www.w3school.com.cn/tags/html_ref_canvas.asp) 或 [mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_usage)\n\n本文只介绍`canvas`对图片的相关操作,也就是围绕`drawImage`方法展开\n\n> Tips: 以下操作都在node服务器下操作, 文本域下会存在跨域问题, 无法实现一些操作\n\n## 玩法一: 图片的组合\n\n在工作中难免会遇到需要前端画图的场景,根据用户的选择,动态的生成海报之类的,这时候就需要使用我们的`canvas`了,先看代码\n\nhtml\n\n```\n<body>\n    <canvas width='384' height='683' id='canvas'></canvas> // ? => 和图片大小相关\n</body>\n\n<script>\n    const canvas = document.getElementById('canvas')\n    const ctx = canvas.getContext('2d')\n    咱继续 (*^▽^*)\n    const img1 = new Image()\n    img1.src = './qiu.png'\n    img1.onload = () => {\n      ctx.drawImage(img1, 0, 0, canvas.width, canvas.height)\n    }\n</script>\n```\n\n`ctx.drawImage(imgdata, x, y, width, height)`方法的参数有5个,分别是:\n\n- `x` 绘制图像的左上点x轴坐标\n- `y` 绘制图像的左上点y轴坐标\n- `width` 绘制图像的宽度\n- `height` 绘制图像的高度\n- `imgdata` 这个在MDN的叫法为`CanvasImageSource`说人话是`canvas图像源`, 还听不懂?没关系我也不懂,总之常用的就是本文中的`HTMLImageElement`和`HTMLVideoElement`\n\n```\nHTMLImageElement`和`HTMLVideoElement`又是啥? 哈哈,其实就是`img标签`和`video标签\n```\n\njavascript\n\n```\nconst img1 = new Image() \n等于\nconst img1 = document.createElement('img')\n也等于\n<img id='img' src=''></img>\nconst img1 = document.getElementById('img')\n\n<video>标签也可以哦\n```\n\n此时的界面\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786455459249.png)\n\n空荡荡的篮球显得很孤独 (ノへ￣、) , 所以,我们得为他加个伴\n\njavascript\n\n```\nconst canvas = document.getElementById('canvas')\nconst ctx = canvas.getContext('2d')\nconst img1 = new Image()\nconst img2 = new Image()\nimg1.src = './qiu.png'\nimg1.onload = () => {\n\tctx.drawImage(img1, 0, 0, canvas.width, canvas.height)\n    img2.src = './cai.png'\n    img2.onload = () => {\n       ctx.drawImage(img2, 40, 180, 315, 453)\n    }\n}\n```\n\n看图\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786462963718.png)\n\n完美! (≧∀≦)ゞ\n\n> `tips1`: 注意要在`img1`加载完成后的回调函数中在给`img2`赋值`src`, 因为后绘制的会抹除先绘制的, 会出现f覆盖关系错误的问题\n\n> `tips2:` 这拙略的抠图, 辣眼睛 : (\n\n以上就是`canvas`对图像进行组合的方法, `so easy`是不是!\n\n## 玩法二 下载\n\n图片组合好了, 该怎么保存(下载)呢?\n\n首先我们得知道下载可分为两种:\n\n1. 本地下载\n2. 服务端下载\n\n本地下载是指纯前端操作, 不经过后端接口直接保存, 而服务端下载则是通过接口返回的图片数据下载\n\n本次只讲本地下载 , 服务端下载我会在下篇`node文章中讲明`\n\n那本地下载咋下呢? 看下图你就知道了:\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786482003291.png)\n\n没错, 就是右键另存为 (>▽<)\n\n**啥? 你不听? 你不会右键?? 你要能看的见的下载???**\n\n![img](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578658597377&di=a52b8230ee175e68838d27940ff188cd&imgtype=0&src=http%3A%2F%2Fd.ifengimg.com%2Fw600%2Fe0.ifengimg.com%2F06%2F2018%2F1219%2FB3D9577023DD2CA4878398E582155F56045D0A8D_size17_w640_h441.jpeg)\n\n好吧, 谁让我是个`好人`呢\n\n先来个按钮\n\nhtml\n\n```\n<canvas id='ctx' width=\"384\" height=\"683\"></canvas>\n<p><button onclick='download()'>下载</button></p>\n```\n\n如图\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786487653170.png)\n\njavascript\n\n```\nbase64_img = canvas.toDataURL()\nconst download = () => {\n    const a = document.createElement('a')\n    a.href = base64_img\n    a.download = 'download.jpg'\n    a.click()\n}\n```\n\n`canvas.toDataURL()`方法是将画布(canvas)的信息转为`base64`格式\n\n`download`方法则是模拟一个`a标签`点击, 此方法确实可以下载, 但有个小弊端就是下载后的图片会偏大(存储的大小), 这是由于转为`base64`格式所造成的\n\n以上就是`canvas`图像的下载, 有些瑕疵, 但目前我也没找到别的好方法, 以后我会了会补全这篇文章的!\n\n## canvas像素操作 - 图片滤镜\n\n换张图\n\nhtml\n\n```\n<canvas id='ctx' width=\"1200\" height=\"800\"></canvas>\n<p><button onclick='blackWhite()'>黑白滤镜</button></p>\n<script>\n  const canvas = document.getElementById('ctx')\n  const ctx = canvas.getContext('2d')\n  const img = new Image()\n  img.src = './flowers.webp'\n  img.onload = () => {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n  }\n</script>\n```\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786505139106.png)\n\n**本来想多举几个例子, 但写到这里有点晕晕的, 这里就举一个黑白滤镜的例子把**\n\n继续\n\njavascript\n\n```\nconst blackWhite = () => {\n  let myData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  let arr = []\n  for(let i = 0; i < myData.data.length; i++) {\n    if ((i+1)%4 == 0) {\n      let total = (myData.data[i - 1] + myData.data[i - 2] + myData.data[i - 3]) / 3\n      myData.data[i - 1] = myData.data[i - 2] = myData.data[i - 3] = total\n    }\n  }\n  ctx.putImageData(myData, 0, 0)\n}\nctx.getImageData(0, 0, canvas.width, canvas.height)\n```\n\n是拿到该画布上的所有像素点, 返回的格式是一个巨大的数组:\n\njavascript\n\n```\n[255, 255, 0, 255, ...]\n```\n\n四位为一个像素点, 分别对应R = 255, G = 255, B == 0, A == 255, 也就是说改点是一个透明度为1的纯黄色像素点,知道了这个后, 想弄成黑白滤镜就有了方向\n\n我们还得知道一个小知识, 那就是, 当R,G,B值相同时会显示为灰色, 且数值越大越亮, 如255, 255, 255 为白色\n\n所以我们可以将每项的元素点的R,G,B加起来除以三赋值给他们, 就实现了黑白滤镜, 如下\n\njavascript\n\n```\nlet total = (myData.data[i - 1] + myData.data[i - 2] + myData.data[i - 3]) / 3\nmyData.data[i - 1] = myData.data[i - 2] = myData.data[i - 3] = total\n```\n\n`ctx.putImageData(myData, 0, 0)`是将处理后的像素点又绘制到画布上\n\n结果\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786512848682.png)\n\n## 总结\n\n以上就是`canvas`对图片的一些操作能力, 另外水平有限, 写的不好请谅解\n\n最后\n\n写的真的有点晕, 最后有点潦草了\n\n![img](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578661700865&di=68b36c83521bfc6f757facf81b172ac4&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2Fc5d403de7d606fcfe802122809529c1ed5fda82816c6c-pF4icn_fw658)\n\n**文章作者:** [Mrpzx](mailto:undefined)\n\n**文章链接:** [http://blog.mrpzx.cn/2020/01/07/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/](http://blog.mrpzx.cn/2020/01/07/利用canvas玩转图片/)\n\n**版权声明:** 本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议。转载请注明来自 [Mrpzx](http://blog.mrpzx.cn/)！\n\n> - **本文链接：** [http://yoursite.com/2020/01/13/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/](http://yoursite.com/2020/01/13/利用canvas玩转图片/)\n> - **版权声明：** 本博客所有文章除特别声明外，均采用 [CC BY 4.0 CN协议](http://creativecommons.org/licenses/by/4.0/deed.zh) 许可协议。转载请注明出处！","source":"_posts/利用canvas玩转图片.md","raw":"## 介绍\n\n`canvas`是`H5`中新加的一个标签\n\nhtml\n\n```\n<canvas width='1200' height='800'> </canvas>\n```\n\n标签主要的属性如图,仅需`width`和`height`两个\n\n就俩? 看着很简单不是? 当然不是 ╮(╯▽╰)╭ , 因为`canvas`是一个需要和`js`结合使用的标签\n\nhtml\n\n```\n<body>\n    <canvas width='1200' height='800' id='canvas'> </canvas>\n</body>\n\n<script>\n    const canvas = document.getElementById('canvas')\n    const ctx = canvas.getContext('2d') // 2d ? 有3d咩 ? 有 => webgl :)\n    ...\n</script>\n```\n\n`canvas`拿的是画板, `ctx`拿的是画笔, 画图主要的是通过画笔不是, 所以我们使用的也基本上是`ctx`身上的属性和方法, `ctx`身上有许多画图的方法:\n\n- 画线的 `lineTo(x, y)`\n- 画矩形的 `rect(x, y, width, height)`\n- 画弧 / 圆的 `arc(x, y, r, startAng, endAng, true/false)`\n- 画文本的 `fillText('Hello World!')`\n- 画图片的 `drawImage(imgData, x, y, width, height)`\n- …\n\n以上只是简写, 有许多细节并未说明, 想细学的可以去\n\n[w3c](https://www.w3school.com.cn/tags/html_ref_canvas.asp) 或 [mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_usage)\n\n本文只介绍`canvas`对图片的相关操作,也就是围绕`drawImage`方法展开\n\n> Tips: 以下操作都在node服务器下操作, 文本域下会存在跨域问题, 无法实现一些操作\n\n## 玩法一: 图片的组合\n\n在工作中难免会遇到需要前端画图的场景,根据用户的选择,动态的生成海报之类的,这时候就需要使用我们的`canvas`了,先看代码\n\nhtml\n\n```\n<body>\n    <canvas width='384' height='683' id='canvas'></canvas> // ? => 和图片大小相关\n</body>\n\n<script>\n    const canvas = document.getElementById('canvas')\n    const ctx = canvas.getContext('2d')\n    咱继续 (*^▽^*)\n    const img1 = new Image()\n    img1.src = './qiu.png'\n    img1.onload = () => {\n      ctx.drawImage(img1, 0, 0, canvas.width, canvas.height)\n    }\n</script>\n```\n\n`ctx.drawImage(imgdata, x, y, width, height)`方法的参数有5个,分别是:\n\n- `x` 绘制图像的左上点x轴坐标\n- `y` 绘制图像的左上点y轴坐标\n- `width` 绘制图像的宽度\n- `height` 绘制图像的高度\n- `imgdata` 这个在MDN的叫法为`CanvasImageSource`说人话是`canvas图像源`, 还听不懂?没关系我也不懂,总之常用的就是本文中的`HTMLImageElement`和`HTMLVideoElement`\n\n```\nHTMLImageElement`和`HTMLVideoElement`又是啥? 哈哈,其实就是`img标签`和`video标签\n```\n\njavascript\n\n```\nconst img1 = new Image() \n等于\nconst img1 = document.createElement('img')\n也等于\n<img id='img' src=''></img>\nconst img1 = document.getElementById('img')\n\n<video>标签也可以哦\n```\n\n此时的界面\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786455459249.png)\n\n空荡荡的篮球显得很孤独 (ノへ￣、) , 所以,我们得为他加个伴\n\njavascript\n\n```\nconst canvas = document.getElementById('canvas')\nconst ctx = canvas.getContext('2d')\nconst img1 = new Image()\nconst img2 = new Image()\nimg1.src = './qiu.png'\nimg1.onload = () => {\n\tctx.drawImage(img1, 0, 0, canvas.width, canvas.height)\n    img2.src = './cai.png'\n    img2.onload = () => {\n       ctx.drawImage(img2, 40, 180, 315, 453)\n    }\n}\n```\n\n看图\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786462963718.png)\n\n完美! (≧∀≦)ゞ\n\n> `tips1`: 注意要在`img1`加载完成后的回调函数中在给`img2`赋值`src`, 因为后绘制的会抹除先绘制的, 会出现f覆盖关系错误的问题\n\n> `tips2:` 这拙略的抠图, 辣眼睛 : (\n\n以上就是`canvas`对图像进行组合的方法, `so easy`是不是!\n\n## 玩法二 下载\n\n图片组合好了, 该怎么保存(下载)呢?\n\n首先我们得知道下载可分为两种:\n\n1. 本地下载\n2. 服务端下载\n\n本地下载是指纯前端操作, 不经过后端接口直接保存, 而服务端下载则是通过接口返回的图片数据下载\n\n本次只讲本地下载 , 服务端下载我会在下篇`node文章中讲明`\n\n那本地下载咋下呢? 看下图你就知道了:\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786482003291.png)\n\n没错, 就是右键另存为 (>▽<)\n\n**啥? 你不听? 你不会右键?? 你要能看的见的下载???**\n\n![img](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578658597377&di=a52b8230ee175e68838d27940ff188cd&imgtype=0&src=http%3A%2F%2Fd.ifengimg.com%2Fw600%2Fe0.ifengimg.com%2F06%2F2018%2F1219%2FB3D9577023DD2CA4878398E582155F56045D0A8D_size17_w640_h441.jpeg)\n\n好吧, 谁让我是个`好人`呢\n\n先来个按钮\n\nhtml\n\n```\n<canvas id='ctx' width=\"384\" height=\"683\"></canvas>\n<p><button onclick='download()'>下载</button></p>\n```\n\n如图\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786487653170.png)\n\njavascript\n\n```\nbase64_img = canvas.toDataURL()\nconst download = () => {\n    const a = document.createElement('a')\n    a.href = base64_img\n    a.download = 'download.jpg'\n    a.click()\n}\n```\n\n`canvas.toDataURL()`方法是将画布(canvas)的信息转为`base64`格式\n\n`download`方法则是模拟一个`a标签`点击, 此方法确实可以下载, 但有个小弊端就是下载后的图片会偏大(存储的大小), 这是由于转为`base64`格式所造成的\n\n以上就是`canvas`图像的下载, 有些瑕疵, 但目前我也没找到别的好方法, 以后我会了会补全这篇文章的!\n\n## canvas像素操作 - 图片滤镜\n\n换张图\n\nhtml\n\n```\n<canvas id='ctx' width=\"1200\" height=\"800\"></canvas>\n<p><button onclick='blackWhite()'>黑白滤镜</button></p>\n<script>\n  const canvas = document.getElementById('ctx')\n  const ctx = canvas.getContext('2d')\n  const img = new Image()\n  img.src = './flowers.webp'\n  img.onload = () => {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n  }\n</script>\n```\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786505139106.png)\n\n**本来想多举几个例子, 但写到这里有点晕晕的, 这里就举一个黑白滤镜的例子把**\n\n继续\n\njavascript\n\n```\nconst blackWhite = () => {\n  let myData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n  let arr = []\n  for(let i = 0; i < myData.data.length; i++) {\n    if ((i+1)%4 == 0) {\n      let total = (myData.data[i - 1] + myData.data[i - 2] + myData.data[i - 3]) / 3\n      myData.data[i - 1] = myData.data[i - 2] = myData.data[i - 3] = total\n    }\n  }\n  ctx.putImageData(myData, 0, 0)\n}\nctx.getImageData(0, 0, canvas.width, canvas.height)\n```\n\n是拿到该画布上的所有像素点, 返回的格式是一个巨大的数组:\n\njavascript\n\n```\n[255, 255, 0, 255, ...]\n```\n\n四位为一个像素点, 分别对应R = 255, G = 255, B == 0, A == 255, 也就是说改点是一个透明度为1的纯黄色像素点,知道了这个后, 想弄成黑白滤镜就有了方向\n\n我们还得知道一个小知识, 那就是, 当R,G,B值相同时会显示为灰色, 且数值越大越亮, 如255, 255, 255 为白色\n\n所以我们可以将每项的元素点的R,G,B加起来除以三赋值给他们, 就实现了黑白滤镜, 如下\n\njavascript\n\n```\nlet total = (myData.data[i - 1] + myData.data[i - 2] + myData.data[i - 3]) / 3\nmyData.data[i - 1] = myData.data[i - 2] = myData.data[i - 3] = total\n```\n\n`ctx.putImageData(myData, 0, 0)`是将处理后的像素点又绘制到画布上\n\n结果\n\n![img](https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786512848682.png)\n\n## 总结\n\n以上就是`canvas`对图片的一些操作能力, 另外水平有限, 写的不好请谅解\n\n最后\n\n写的真的有点晕, 最后有点潦草了\n\n![img](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578661700865&di=68b36c83521bfc6f757facf81b172ac4&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2Fc5d403de7d606fcfe802122809529c1ed5fda82816c6c-pF4icn_fw658)\n\n**文章作者:** [Mrpzx](mailto:undefined)\n\n**文章链接:** [http://blog.mrpzx.cn/2020/01/07/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/](http://blog.mrpzx.cn/2020/01/07/利用canvas玩转图片/)\n\n**版权声明:** 本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议。转载请注明来自 [Mrpzx](http://blog.mrpzx.cn/)！\n\n> - **本文链接：** [http://yoursite.com/2020/01/13/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/](http://yoursite.com/2020/01/13/利用canvas玩转图片/)\n> - **版权声明：** 本博客所有文章除特别声明外，均采用 [CC BY 4.0 CN协议](http://creativecommons.org/licenses/by/4.0/deed.zh) 许可协议。转载请注明出处！","slug":"利用canvas玩转图片","published":1,"date":"2020-04-26T06:03:57.053Z","updated":"2020-04-26T06:03:57.073Z","title":"利用canvas玩转图片","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9gnefje0000iovhfrvd529a","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><code>canvas</code>是<code>H5</code>中新加的一个标签</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas width&#x3D;&#39;1200&#39; height&#x3D;&#39;800&#39;&gt; &lt;&#x2F;canvas&gt;</span><br></pre></td></tr></table></figure>\n\n<p>标签主要的属性如图,仅需<code>width</code>和<code>height</code>两个</p>\n<p>就俩? 看着很简单不是? 当然不是 ╮(╯▽╰)╭ , 因为<code>canvas</code>是一个需要和<code>js</code>结合使用的标签</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;canvas width&#x3D;&#39;1200&#39; height&#x3D;&#39;800&#39; id&#x3D;&#39;canvas&#39;&gt; &lt;&#x2F;canvas&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const canvas &#x3D; document.getElementById(&#39;canvas&#39;)</span><br><span class=\"line\">    const ctx &#x3D; canvas.getContext(&#39;2d&#39;) &#x2F;&#x2F; 2d ? 有3d咩 ? 有 &#x3D;&gt; webgl :)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>canvas</code>拿的是画板, <code>ctx</code>拿的是画笔, 画图主要的是通过画笔不是, 所以我们使用的也基本上是<code>ctx</code>身上的属性和方法, <code>ctx</code>身上有许多画图的方法:</p>\n<ul>\n<li>画线的 <code>lineTo(x, y)</code></li>\n<li>画矩形的 <code>rect(x, y, width, height)</code></li>\n<li>画弧 / 圆的 <code>arc(x, y, r, startAng, endAng, true/false)</code></li>\n<li>画文本的 <code>fillText(&#39;Hello World!&#39;)</code></li>\n<li>画图片的 <code>drawImage(imgData, x, y, width, height)</code></li>\n<li>…</li>\n</ul>\n<p>以上只是简写, 有许多细节并未说明, 想细学的可以去</p>\n<p><a href=\"https://www.w3school.com.cn/tags/html_ref_canvas.asp\" target=\"_blank\" rel=\"noopener\">w3c</a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_usage\" target=\"_blank\" rel=\"noopener\">mdn</a></p>\n<p>本文只介绍<code>canvas</code>对图片的相关操作,也就是围绕<code>drawImage</code>方法展开</p>\n<blockquote>\n<p>Tips: 以下操作都在node服务器下操作, 文本域下会存在跨域问题, 无法实现一些操作</p>\n</blockquote>\n<h2 id=\"玩法一-图片的组合\"><a href=\"#玩法一-图片的组合\" class=\"headerlink\" title=\"玩法一: 图片的组合\"></a>玩法一: 图片的组合</h2><p>在工作中难免会遇到需要前端画图的场景,根据用户的选择,动态的生成海报之类的,这时候就需要使用我们的<code>canvas</code>了,先看代码</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;canvas width&#x3D;&#39;384&#39; height&#x3D;&#39;683&#39; id&#x3D;&#39;canvas&#39;&gt;&lt;&#x2F;canvas&gt; &#x2F;&#x2F; ? &#x3D;&gt; 和图片大小相关</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const canvas &#x3D; document.getElementById(&#39;canvas&#39;)</span><br><span class=\"line\">    const ctx &#x3D; canvas.getContext(&#39;2d&#39;)</span><br><span class=\"line\">    咱继续 (*^▽^*)</span><br><span class=\"line\">    const img1 &#x3D; new Image()</span><br><span class=\"line\">    img1.src &#x3D; &#39;.&#x2F;qiu.png&#39;</span><br><span class=\"line\">    img1.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">      ctx.drawImage(img1, 0, 0, canvas.width, canvas.height)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>ctx.drawImage(imgdata, x, y, width, height)</code>方法的参数有5个,分别是:</p>\n<ul>\n<li><code>x</code> 绘制图像的左上点x轴坐标</li>\n<li><code>y</code> 绘制图像的左上点y轴坐标</li>\n<li><code>width</code> 绘制图像的宽度</li>\n<li><code>height</code> 绘制图像的高度</li>\n<li><code>imgdata</code> 这个在MDN的叫法为<code>CanvasImageSource</code>说人话是<code>canvas图像源</code>, 还听不懂?没关系我也不懂,总之常用的就是本文中的<code>HTMLImageElement</code>和<code>HTMLVideoElement</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTMLImageElement&#96;和&#96;HTMLVideoElement&#96;又是啥? 哈哈,其实就是&#96;img标签&#96;和&#96;video标签</span><br></pre></td></tr></table></figure>\n\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const img1 &#x3D; new Image() </span><br><span class=\"line\">等于</span><br><span class=\"line\">const img1 &#x3D; document.createElement(&#39;img&#39;)</span><br><span class=\"line\">也等于</span><br><span class=\"line\">&lt;img id&#x3D;&#39;img&#39; src&#x3D;&#39;&#39;&gt;&lt;&#x2F;img&gt;</span><br><span class=\"line\">const img1 &#x3D; document.getElementById(&#39;img&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;video&gt;标签也可以哦</span><br></pre></td></tr></table></figure>\n\n<p>此时的界面</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786455459249.png\" alt=\"img\"></p>\n<p>空荡荡的篮球显得很孤独 (ノへ￣、) , 所以,我们得为他加个伴</p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const canvas &#x3D; document.getElementById(&#39;canvas&#39;)</span><br><span class=\"line\">const ctx &#x3D; canvas.getContext(&#39;2d&#39;)</span><br><span class=\"line\">const img1 &#x3D; new Image()</span><br><span class=\"line\">const img2 &#x3D; new Image()</span><br><span class=\"line\">img1.src &#x3D; &#39;.&#x2F;qiu.png&#39;</span><br><span class=\"line\">img1.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">\tctx.drawImage(img1, 0, 0, canvas.width, canvas.height)</span><br><span class=\"line\">    img2.src &#x3D; &#39;.&#x2F;cai.png&#39;</span><br><span class=\"line\">    img2.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">       ctx.drawImage(img2, 40, 180, 315, 453)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看图</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786462963718.png\" alt=\"img\"></p>\n<p>完美! (≧∀≦)ゞ</p>\n<blockquote>\n<p><code>tips1</code>: 注意要在<code>img1</code>加载完成后的回调函数中在给<code>img2</code>赋值<code>src</code>, 因为后绘制的会抹除先绘制的, 会出现f覆盖关系错误的问题</p>\n</blockquote>\n<blockquote>\n<p><code>tips2:</code> 这拙略的抠图, 辣眼睛 : (</p>\n</blockquote>\n<p>以上就是<code>canvas</code>对图像进行组合的方法, <code>so easy</code>是不是!</p>\n<h2 id=\"玩法二-下载\"><a href=\"#玩法二-下载\" class=\"headerlink\" title=\"玩法二 下载\"></a>玩法二 下载</h2><p>图片组合好了, 该怎么保存(下载)呢?</p>\n<p>首先我们得知道下载可分为两种:</p>\n<ol>\n<li>本地下载</li>\n<li>服务端下载</li>\n</ol>\n<p>本地下载是指纯前端操作, 不经过后端接口直接保存, 而服务端下载则是通过接口返回的图片数据下载</p>\n<p>本次只讲本地下载 , 服务端下载我会在下篇<code>node文章中讲明</code></p>\n<p>那本地下载咋下呢? 看下图你就知道了:</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786482003291.png\" alt=\"img\"></p>\n<p>没错, 就是右键另存为 (&gt;▽&lt;)</p>\n<p><strong>啥? 你不听? 你不会右键?? 你要能看的见的下载???</strong></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578658597377&di=a52b8230ee175e68838d27940ff188cd&imgtype=0&src=http%3A%2F%2Fd.ifengimg.com%2Fw600%2Fe0.ifengimg.com%2F06%2F2018%2F1219%2FB3D9577023DD2CA4878398E582155F56045D0A8D_size17_w640_h441.jpeg\" alt=\"img\"></p>\n<p>好吧, 谁让我是个<code>好人</code>呢</p>\n<p>先来个按钮</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id&#x3D;&#39;ctx&#39; width&#x3D;&quot;384&quot; height&#x3D;&quot;683&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;button onclick&#x3D;&#39;download()&#39;&gt;下载&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如图</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786487653170.png\" alt=\"img\"></p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base64_img &#x3D; canvas.toDataURL()</span><br><span class=\"line\">const download &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const a &#x3D; document.createElement(&#39;a&#39;)</span><br><span class=\"line\">    a.href &#x3D; base64_img</span><br><span class=\"line\">    a.download &#x3D; &#39;download.jpg&#39;</span><br><span class=\"line\">    a.click()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>canvas.toDataURL()</code>方法是将画布(canvas)的信息转为<code>base64</code>格式</p>\n<p><code>download</code>方法则是模拟一个<code>a标签</code>点击, 此方法确实可以下载, 但有个小弊端就是下载后的图片会偏大(存储的大小), 这是由于转为<code>base64</code>格式所造成的</p>\n<p>以上就是<code>canvas</code>图像的下载, 有些瑕疵, 但目前我也没找到别的好方法, 以后我会了会补全这篇文章的!</p>\n<h2 id=\"canvas像素操作-图片滤镜\"><a href=\"#canvas像素操作-图片滤镜\" class=\"headerlink\" title=\"canvas像素操作 - 图片滤镜\"></a>canvas像素操作 - 图片滤镜</h2><p>换张图</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id&#x3D;&#39;ctx&#39; width&#x3D;&quot;1200&quot; height&#x3D;&quot;800&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;button onclick&#x3D;&#39;blackWhite()&#39;&gt;黑白滤镜&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  const canvas &#x3D; document.getElementById(&#39;ctx&#39;)</span><br><span class=\"line\">  const ctx &#x3D; canvas.getContext(&#39;2d&#39;)</span><br><span class=\"line\">  const img &#x3D; new Image()</span><br><span class=\"line\">  img.src &#x3D; &#39;.&#x2F;flowers.webp&#39;</span><br><span class=\"line\">  img.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    ctx.drawImage(img, 0, 0, canvas.width, canvas.height)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786505139106.png\" alt=\"img\"></p>\n<p><strong>本来想多举几个例子, 但写到这里有点晕晕的, 这里就举一个黑白滤镜的例子把</strong></p>\n<p>继续</p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const blackWhite &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  let myData &#x3D; ctx.getImageData(0, 0, canvas.width, canvas.height)</span><br><span class=\"line\">  let arr &#x3D; []</span><br><span class=\"line\">  for(let i &#x3D; 0; i &lt; myData.data.length; i++) &#123;</span><br><span class=\"line\">    if ((i+1)%4 &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">      let total &#x3D; (myData.data[i - 1] + myData.data[i - 2] + myData.data[i - 3]) &#x2F; 3</span><br><span class=\"line\">      myData.data[i - 1] &#x3D; myData.data[i - 2] &#x3D; myData.data[i - 3] &#x3D; total</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ctx.putImageData(myData, 0, 0)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ctx.getImageData(0, 0, canvas.width, canvas.height)</span><br></pre></td></tr></table></figure>\n\n<p>是拿到该画布上的所有像素点, 返回的格式是一个巨大的数组:</p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[255, 255, 0, 255, ...]</span><br></pre></td></tr></table></figure>\n\n<p>四位为一个像素点, 分别对应R = 255, G = 255, B == 0, A == 255, 也就是说改点是一个透明度为1的纯黄色像素点,知道了这个后, 想弄成黑白滤镜就有了方向</p>\n<p>我们还得知道一个小知识, 那就是, 当R,G,B值相同时会显示为灰色, 且数值越大越亮, 如255, 255, 255 为白色</p>\n<p>所以我们可以将每项的元素点的R,G,B加起来除以三赋值给他们, 就实现了黑白滤镜, 如下</p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let total &#x3D; (myData.data[i - 1] + myData.data[i - 2] + myData.data[i - 3]) &#x2F; 3</span><br><span class=\"line\">myData.data[i - 1] &#x3D; myData.data[i - 2] &#x3D; myData.data[i - 3] &#x3D; total</span><br></pre></td></tr></table></figure>\n\n<p><code>ctx.putImageData(myData, 0, 0)</code>是将处理后的像素点又绘制到画布上</p>\n<p>结果</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786512848682.png\" alt=\"img\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是<code>canvas</code>对图片的一些操作能力, 另外水平有限, 写的不好请谅解</p>\n<p>最后</p>\n<p>写的真的有点晕, 最后有点潦草了</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578661700865&di=68b36c83521bfc6f757facf81b172ac4&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2Fc5d403de7d606fcfe802122809529c1ed5fda82816c6c-pF4icn_fw658\" alt=\"img\"></p>\n<p><strong>文章作者:</strong> <a href=\"mailto:undefined\">Mrpzx</a></p>\n<p><strong>文章链接:</strong> <a href=\"http://blog.mrpzx.cn/2020/01/07/利用canvas玩转图片/\" target=\"_blank\" rel=\"noopener\">http://blog.mrpzx.cn/2020/01/07/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/</a></p>\n<p><strong>版权声明:</strong> 本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\" rel=\"noopener\">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href=\"http://blog.mrpzx.cn/\" target=\"_blank\" rel=\"noopener\">Mrpzx</a>！</p>\n<blockquote>\n<ul>\n<li><strong>本文链接：</strong> <a href=\"http://yoursite.com/2020/01/13/利用canvas玩转图片/\">http://yoursite.com/2020/01/13/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/</a></li>\n<li><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href=\"http://creativecommons.org/licenses/by/4.0/deed.zh\" target=\"_blank\" rel=\"noopener\">CC BY 4.0 CN协议</a> 许可协议。转载请注明出处！</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><code>canvas</code>是<code>H5</code>中新加的一个标签</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas width&#x3D;&#39;1200&#39; height&#x3D;&#39;800&#39;&gt; &lt;&#x2F;canvas&gt;</span><br></pre></td></tr></table></figure>\n\n<p>标签主要的属性如图,仅需<code>width</code>和<code>height</code>两个</p>\n<p>就俩? 看着很简单不是? 当然不是 ╮(╯▽╰)╭ , 因为<code>canvas</code>是一个需要和<code>js</code>结合使用的标签</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;canvas width&#x3D;&#39;1200&#39; height&#x3D;&#39;800&#39; id&#x3D;&#39;canvas&#39;&gt; &lt;&#x2F;canvas&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const canvas &#x3D; document.getElementById(&#39;canvas&#39;)</span><br><span class=\"line\">    const ctx &#x3D; canvas.getContext(&#39;2d&#39;) &#x2F;&#x2F; 2d ? 有3d咩 ? 有 &#x3D;&gt; webgl :)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>canvas</code>拿的是画板, <code>ctx</code>拿的是画笔, 画图主要的是通过画笔不是, 所以我们使用的也基本上是<code>ctx</code>身上的属性和方法, <code>ctx</code>身上有许多画图的方法:</p>\n<ul>\n<li>画线的 <code>lineTo(x, y)</code></li>\n<li>画矩形的 <code>rect(x, y, width, height)</code></li>\n<li>画弧 / 圆的 <code>arc(x, y, r, startAng, endAng, true/false)</code></li>\n<li>画文本的 <code>fillText(&#39;Hello World!&#39;)</code></li>\n<li>画图片的 <code>drawImage(imgData, x, y, width, height)</code></li>\n<li>…</li>\n</ul>\n<p>以上只是简写, 有许多细节并未说明, 想细学的可以去</p>\n<p><a href=\"https://www.w3school.com.cn/tags/html_ref_canvas.asp\" target=\"_blank\" rel=\"noopener\">w3c</a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_usage\" target=\"_blank\" rel=\"noopener\">mdn</a></p>\n<p>本文只介绍<code>canvas</code>对图片的相关操作,也就是围绕<code>drawImage</code>方法展开</p>\n<blockquote>\n<p>Tips: 以下操作都在node服务器下操作, 文本域下会存在跨域问题, 无法实现一些操作</p>\n</blockquote>\n<h2 id=\"玩法一-图片的组合\"><a href=\"#玩法一-图片的组合\" class=\"headerlink\" title=\"玩法一: 图片的组合\"></a>玩法一: 图片的组合</h2><p>在工作中难免会遇到需要前端画图的场景,根据用户的选择,动态的生成海报之类的,这时候就需要使用我们的<code>canvas</code>了,先看代码</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;canvas width&#x3D;&#39;384&#39; height&#x3D;&#39;683&#39; id&#x3D;&#39;canvas&#39;&gt;&lt;&#x2F;canvas&gt; &#x2F;&#x2F; ? &#x3D;&gt; 和图片大小相关</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    const canvas &#x3D; document.getElementById(&#39;canvas&#39;)</span><br><span class=\"line\">    const ctx &#x3D; canvas.getContext(&#39;2d&#39;)</span><br><span class=\"line\">    咱继续 (*^▽^*)</span><br><span class=\"line\">    const img1 &#x3D; new Image()</span><br><span class=\"line\">    img1.src &#x3D; &#39;.&#x2F;qiu.png&#39;</span><br><span class=\"line\">    img1.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">      ctx.drawImage(img1, 0, 0, canvas.width, canvas.height)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>ctx.drawImage(imgdata, x, y, width, height)</code>方法的参数有5个,分别是:</p>\n<ul>\n<li><code>x</code> 绘制图像的左上点x轴坐标</li>\n<li><code>y</code> 绘制图像的左上点y轴坐标</li>\n<li><code>width</code> 绘制图像的宽度</li>\n<li><code>height</code> 绘制图像的高度</li>\n<li><code>imgdata</code> 这个在MDN的叫法为<code>CanvasImageSource</code>说人话是<code>canvas图像源</code>, 还听不懂?没关系我也不懂,总之常用的就是本文中的<code>HTMLImageElement</code>和<code>HTMLVideoElement</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTMLImageElement&#96;和&#96;HTMLVideoElement&#96;又是啥? 哈哈,其实就是&#96;img标签&#96;和&#96;video标签</span><br></pre></td></tr></table></figure>\n\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const img1 &#x3D; new Image() </span><br><span class=\"line\">等于</span><br><span class=\"line\">const img1 &#x3D; document.createElement(&#39;img&#39;)</span><br><span class=\"line\">也等于</span><br><span class=\"line\">&lt;img id&#x3D;&#39;img&#39; src&#x3D;&#39;&#39;&gt;&lt;&#x2F;img&gt;</span><br><span class=\"line\">const img1 &#x3D; document.getElementById(&#39;img&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;video&gt;标签也可以哦</span><br></pre></td></tr></table></figure>\n\n<p>此时的界面</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786455459249.png\" alt=\"img\"></p>\n<p>空荡荡的篮球显得很孤独 (ノへ￣、) , 所以,我们得为他加个伴</p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const canvas &#x3D; document.getElementById(&#39;canvas&#39;)</span><br><span class=\"line\">const ctx &#x3D; canvas.getContext(&#39;2d&#39;)</span><br><span class=\"line\">const img1 &#x3D; new Image()</span><br><span class=\"line\">const img2 &#x3D; new Image()</span><br><span class=\"line\">img1.src &#x3D; &#39;.&#x2F;qiu.png&#39;</span><br><span class=\"line\">img1.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">\tctx.drawImage(img1, 0, 0, canvas.width, canvas.height)</span><br><span class=\"line\">    img2.src &#x3D; &#39;.&#x2F;cai.png&#39;</span><br><span class=\"line\">    img2.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">       ctx.drawImage(img2, 40, 180, 315, 453)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看图</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786462963718.png\" alt=\"img\"></p>\n<p>完美! (≧∀≦)ゞ</p>\n<blockquote>\n<p><code>tips1</code>: 注意要在<code>img1</code>加载完成后的回调函数中在给<code>img2</code>赋值<code>src</code>, 因为后绘制的会抹除先绘制的, 会出现f覆盖关系错误的问题</p>\n</blockquote>\n<blockquote>\n<p><code>tips2:</code> 这拙略的抠图, 辣眼睛 : (</p>\n</blockquote>\n<p>以上就是<code>canvas</code>对图像进行组合的方法, <code>so easy</code>是不是!</p>\n<h2 id=\"玩法二-下载\"><a href=\"#玩法二-下载\" class=\"headerlink\" title=\"玩法二 下载\"></a>玩法二 下载</h2><p>图片组合好了, 该怎么保存(下载)呢?</p>\n<p>首先我们得知道下载可分为两种:</p>\n<ol>\n<li>本地下载</li>\n<li>服务端下载</li>\n</ol>\n<p>本地下载是指纯前端操作, 不经过后端接口直接保存, 而服务端下载则是通过接口返回的图片数据下载</p>\n<p>本次只讲本地下载 , 服务端下载我会在下篇<code>node文章中讲明</code></p>\n<p>那本地下载咋下呢? 看下图你就知道了:</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786482003291.png\" alt=\"img\"></p>\n<p>没错, 就是右键另存为 (&gt;▽&lt;)</p>\n<p><strong>啥? 你不听? 你不会右键?? 你要能看的见的下载???</strong></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578658597377&di=a52b8230ee175e68838d27940ff188cd&imgtype=0&src=http%3A%2F%2Fd.ifengimg.com%2Fw600%2Fe0.ifengimg.com%2F06%2F2018%2F1219%2FB3D9577023DD2CA4878398E582155F56045D0A8D_size17_w640_h441.jpeg\" alt=\"img\"></p>\n<p>好吧, 谁让我是个<code>好人</code>呢</p>\n<p>先来个按钮</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id&#x3D;&#39;ctx&#39; width&#x3D;&quot;384&quot; height&#x3D;&quot;683&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;button onclick&#x3D;&#39;download()&#39;&gt;下载&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如图</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786487653170.png\" alt=\"img\"></p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">base64_img &#x3D; canvas.toDataURL()</span><br><span class=\"line\">const download &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    const a &#x3D; document.createElement(&#39;a&#39;)</span><br><span class=\"line\">    a.href &#x3D; base64_img</span><br><span class=\"line\">    a.download &#x3D; &#39;download.jpg&#39;</span><br><span class=\"line\">    a.click()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>canvas.toDataURL()</code>方法是将画布(canvas)的信息转为<code>base64</code>格式</p>\n<p><code>download</code>方法则是模拟一个<code>a标签</code>点击, 此方法确实可以下载, 但有个小弊端就是下载后的图片会偏大(存储的大小), 这是由于转为<code>base64</code>格式所造成的</p>\n<p>以上就是<code>canvas</code>图像的下载, 有些瑕疵, 但目前我也没找到别的好方法, 以后我会了会补全这篇文章的!</p>\n<h2 id=\"canvas像素操作-图片滤镜\"><a href=\"#canvas像素操作-图片滤镜\" class=\"headerlink\" title=\"canvas像素操作 - 图片滤镜\"></a>canvas像素操作 - 图片滤镜</h2><p>换张图</p>\n<p>html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id&#x3D;&#39;ctx&#39; width&#x3D;&quot;1200&quot; height&#x3D;&quot;800&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class=\"line\">&lt;p&gt;&lt;button onclick&#x3D;&#39;blackWhite()&#39;&gt;黑白滤镜&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  const canvas &#x3D; document.getElementById(&#39;ctx&#39;)</span><br><span class=\"line\">  const ctx &#x3D; canvas.getContext(&#39;2d&#39;)</span><br><span class=\"line\">  const img &#x3D; new Image()</span><br><span class=\"line\">  img.src &#x3D; &#39;.&#x2F;flowers.webp&#39;</span><br><span class=\"line\">  img.onload &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    ctx.drawImage(img, 0, 0, canvas.width, canvas.height)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786505139106.png\" alt=\"img\"></p>\n<p><strong>本来想多举几个例子, 但写到这里有点晕晕的, 这里就举一个黑白滤镜的例子把</strong></p>\n<p>继续</p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const blackWhite &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  let myData &#x3D; ctx.getImageData(0, 0, canvas.width, canvas.height)</span><br><span class=\"line\">  let arr &#x3D; []</span><br><span class=\"line\">  for(let i &#x3D; 0; i &lt; myData.data.length; i++) &#123;</span><br><span class=\"line\">    if ((i+1)%4 &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">      let total &#x3D; (myData.data[i - 1] + myData.data[i - 2] + myData.data[i - 3]) &#x2F; 3</span><br><span class=\"line\">      myData.data[i - 1] &#x3D; myData.data[i - 2] &#x3D; myData.data[i - 3] &#x3D; total</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ctx.putImageData(myData, 0, 0)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ctx.getImageData(0, 0, canvas.width, canvas.height)</span><br></pre></td></tr></table></figure>\n\n<p>是拿到该画布上的所有像素点, 返回的格式是一个巨大的数组:</p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[255, 255, 0, 255, ...]</span><br></pre></td></tr></table></figure>\n\n<p>四位为一个像素点, 分别对应R = 255, G = 255, B == 0, A == 255, 也就是说改点是一个透明度为1的纯黄色像素点,知道了这个后, 想弄成黑白滤镜就有了方向</p>\n<p>我们还得知道一个小知识, 那就是, 当R,G,B值相同时会显示为灰色, 且数值越大越亮, 如255, 255, 255 为白色</p>\n<p>所以我们可以将每项的元素点的R,G,B加起来除以三赋值给他们, 就实现了黑白滤镜, 如下</p>\n<p>javascript</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let total &#x3D; (myData.data[i - 1] + myData.data[i - 2] + myData.data[i - 3]) &#x2F; 3</span><br><span class=\"line\">myData.data[i - 1] &#x3D; myData.data[i - 2] &#x3D; myData.data[i - 3] &#x3D; total</span><br></pre></td></tr></table></figure>\n\n<p><code>ctx.putImageData(myData, 0, 0)</code>是将处理后的像素点又绘制到画布上</p>\n<p>结果</p>\n<p><img src=\"https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786512848682.png\" alt=\"img\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是<code>canvas</code>对图片的一些操作能力, 另外水平有限, 写的不好请谅解</p>\n<p>最后</p>\n<p>写的真的有点晕, 最后有点潦草了</p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578661700865&di=68b36c83521bfc6f757facf81b172ac4&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2Fc5d403de7d606fcfe802122809529c1ed5fda82816c6c-pF4icn_fw658\" alt=\"img\"></p>\n<p><strong>文章作者:</strong> <a href=\"mailto:undefined\">Mrpzx</a></p>\n<p><strong>文章链接:</strong> <a href=\"http://blog.mrpzx.cn/2020/01/07/利用canvas玩转图片/\" target=\"_blank\" rel=\"noopener\">http://blog.mrpzx.cn/2020/01/07/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/</a></p>\n<p><strong>版权声明:</strong> 本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\" rel=\"noopener\">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href=\"http://blog.mrpzx.cn/\" target=\"_blank\" rel=\"noopener\">Mrpzx</a>！</p>\n<blockquote>\n<ul>\n<li><strong>本文链接：</strong> <a href=\"http://yoursite.com/2020/01/13/利用canvas玩转图片/\">http://yoursite.com/2020/01/13/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/</a></li>\n<li><strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href=\"http://creativecommons.org/licenses/by/4.0/deed.zh\" target=\"_blank\" rel=\"noopener\">CC BY 4.0 CN协议</a> 许可协议。转载请注明出处！</li>\n</ul>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}