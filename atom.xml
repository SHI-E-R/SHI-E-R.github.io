<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-13T02:09:16.267Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用canvas玩转图片</title>
    <link href="http://yoursite.com/2020/01/13/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2020/01/13/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/</id>
    <published>2020-01-13T02:06:47.000Z</published>
    <updated>2020-01-13T02:09:16.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>canvas</code>是<code>H5</code>中新加的一个标签</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">'1200'</span> <span class="attr">height</span>=<span class="string">'800'</span>&gt;</span> <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签主要的属性如图,仅需<code>width</code>和<code>height</code>两个</p><p>就俩? 看着很简单不是? 当然不是 ╮(╯▽╰)╭ , 因为<code>canvas</code>是一个需要和<code>js</code>结合使用的标签</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">'1200'</span> <span class="attr">height</span>=<span class="string">'800'</span> <span class="attr">id</span>=<span class="string">'canvas'</span>&gt;</span> <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>) <span class="comment">// 2d ? 有3d咩 ? 有 =&gt; webgl :)</span></span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>canvas</code>拿的是画板, <code>ctx</code>拿的是画笔, 画图主要的是通过画笔不是, 所以我们使用的也基本上是<code>ctx</code>身上的属性和方法, <code>ctx</code>身上有许多画图的方法:</p><ul><li>画线的 <code>lineTo(x, y)</code></li><li>画矩形的 <code>rect(x, y, width, height)</code></li><li>画弧 / 圆的 <code>arc(x, y, r, startAng, endAng, true/false)</code></li><li>画文本的 <code>fillText(&#39;Hello World!&#39;)</code></li><li>画图片的 <code>drawImage(imgData, x, y, width, height)</code></li><li>…</li></ul><p>以上只是简写, 有许多细节并未说明, 想细学的可以去</p><p><a href="https://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">w3c</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Basic_usage" target="_blank" rel="noopener">mdn</a></p><p>本文只介绍<code>canvas</code>对图片的相关操作,也就是围绕<code>drawImage</code>方法展开</p><blockquote><p>Tips: 以下操作都在node服务器下操作, 文本域下会存在跨域问题, 无法实现一些操作</p></blockquote><h2 id="玩法一-图片的组合"><a href="#玩法一-图片的组合" class="headerlink" title="玩法一: 图片的组合"></a>玩法一: 图片的组合</h2><p>在工作中难免会遇到需要前端画图的场景,根据用户的选择,动态的生成海报之类的,这时候就需要使用我们的<code>canvas</code>了,先看代码</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">'384'</span> <span class="attr">height</span>=<span class="string">'683'</span> <span class="attr">id</span>=<span class="string">'canvas'</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> // ? =&gt; 和图片大小相关</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span></span><br><span class="line">    咱继续 (*^▽^*)</span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> img1 = <span class="keyword">new</span> Image()</span></span><br><span class="line"><span class="actionscript">    img1.src = <span class="string">'./qiu.png'</span></span></span><br><span class="line"><span class="javascript">    img1.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">      ctx.drawImage(img1, 0, 0, canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ctx.drawImage(imgdata, x, y, width, height)</code>方法的参数有5个,分别是:</p><ul><li><code>x</code> 绘制图像的左上点x轴坐标</li><li><code>y</code> 绘制图像的左上点y轴坐标</li><li><code>width</code> 绘制图像的宽度</li><li><code>height</code> 绘制图像的高度</li><li><code>imgdata</code> 这个在MDN的叫法为<code>CanvasImageSource</code>说人话是<code>canvas图像源</code>, 还听不懂?没关系我也不懂,总之常用的就是本文中的<code>HTMLImageElement</code>和<code>HTMLVideoElement</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTMLImageElement&#96;和&#96;HTMLVideoElement&#96;又是啥? 哈哈,其实就是&#96;img标签&#96;和&#96;video标签</span><br></pre></td></tr></table></figure><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img1 = <span class="keyword">new</span> Image() </span><br><span class="line">等于</span><br><span class="line"><span class="keyword">const</span> img1 = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">也等于</span><br><span class="line">&lt;img id=<span class="string">'img'</span> src=<span class="string">''</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> img1 = <span class="built_in">document</span>.getElementById(<span class="string">'img'</span>)</span><br><span class="line"></span><br><span class="line">&lt;video&gt;标签也可以哦</span><br></pre></td></tr></table></figure><p>此时的界面</p><p><img src="https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786455459249.png" alt="img"></p><p>空荡荡的篮球显得很孤独 (ノへ￣、) , 所以,我们得为他加个伴</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>)</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"><span class="keyword">const</span> img1 = <span class="keyword">new</span> Image()</span><br><span class="line"><span class="keyword">const</span> img2 = <span class="keyword">new</span> Image()</span><br><span class="line">img1.src = <span class="string">'./qiu.png'</span></span><br><span class="line">img1.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">ctx.drawImage(img1, <span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">    img2.src = <span class="string">'./cai.png'</span></span><br><span class="line">    img2.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       ctx.drawImage(img2, <span class="number">40</span>, <span class="number">180</span>, <span class="number">315</span>, <span class="number">453</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看图</p><p><img src="https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786462963718.png" alt="img"></p><p>完美! (≧∀≦)ゞ</p><blockquote><p><code>tips1</code>: 注意要在<code>img1</code>加载完成后的回调函数中在给<code>img2</code>赋值<code>src</code>, 因为后绘制的会抹除先绘制的, 会出现f覆盖关系错误的问题</p></blockquote><blockquote><p><code>tips2:</code> 这拙略的抠图, 辣眼睛 : (</p></blockquote><p>以上就是<code>canvas</code>对图像进行组合的方法, <code>so easy</code>是不是!</p><h2 id="玩法二-下载"><a href="#玩法二-下载" class="headerlink" title="玩法二 下载"></a>玩法二 下载</h2><p>图片组合好了, 该怎么保存(下载)呢?</p><p>首先我们得知道下载可分为两种:</p><ol><li>本地下载</li><li>服务端下载</li></ol><p>本地下载是指纯前端操作, 不经过后端接口直接保存, 而服务端下载则是通过接口返回的图片数据下载</p><p>本次只讲本地下载 , 服务端下载我会在下篇<code>node文章中讲明</code></p><p>那本地下载咋下呢? 看下图你就知道了:</p><p><img src="https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786482003291.png" alt="img"></p><p>没错, 就是右键另存为 (&gt;▽&lt;)</p><p><strong>啥? 你不听? 你不会右键?? 你要能看的见的下载???</strong></p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578658597377&di=a52b8230ee175e68838d27940ff188cd&imgtype=0&src=http%3A%2F%2Fd.ifengimg.com%2Fw600%2Fe0.ifengimg.com%2F06%2F2018%2F1219%2FB3D9577023DD2CA4878398E582155F56045D0A8D_size17_w640_h441.jpeg" alt="img"></p><p>好吧, 谁让我是个<code>好人</code>呢</p><p>先来个按钮</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">'ctx'</span> <span class="attr">width</span>=<span class="string">"384"</span> <span class="attr">height</span>=<span class="string">"683"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">'download()'</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如图</p><p><img src="https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786487653170.png" alt="img"></p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">base64_img = canvas.toDataURL()</span><br><span class="line"><span class="keyword">const</span> download = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">    a.href = base64_img</span><br><span class="line">    a.download = <span class="string">'download.jpg'</span></span><br><span class="line">    a.click()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>canvas.toDataURL()</code>方法是将画布(canvas)的信息转为<code>base64</code>格式</p><p><code>download</code>方法则是模拟一个<code>a标签</code>点击, 此方法确实可以下载, 但有个小弊端就是下载后的图片会偏大(存储的大小), 这是由于转为<code>base64</code>格式所造成的</p><p>以上就是<code>canvas</code>图像的下载, 有些瑕疵, 但目前我也没找到别的好方法, 以后我会了会补全这篇文章的!</p><h2 id="canvas像素操作-图片滤镜"><a href="#canvas像素操作-图片滤镜" class="headerlink" title="canvas像素操作 - 图片滤镜"></a>canvas像素操作 - 图片滤镜</h2><p>换张图</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">'ctx'</span> <span class="attr">width</span>=<span class="string">"1200"</span> <span class="attr">height</span>=<span class="string">"800"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">'blackWhite()'</span>&gt;</span>黑白滤镜<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'ctx'</span>)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> img = <span class="keyword">new</span> Image()</span></span><br><span class="line"><span class="actionscript">  img.src = <span class="string">'./flowers.webp'</span></span></span><br><span class="line"><span class="javascript">  img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">    ctx.drawImage(img, 0, 0, canvas.width, canvas.height)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786505139106.png" alt="img"></p><p><strong>本来想多举几个例子, 但写到这里有点晕晕的, 这里就举一个黑白滤镜的例子把</strong></p><p>继续</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> blackWhite = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> myData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; myData.data.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((i+<span class="number">1</span>)%<span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> total = (myData.data[i - <span class="number">1</span>] + myData.data[i - <span class="number">2</span>] + myData.data[i - <span class="number">3</span>]) / <span class="number">3</span></span><br><span class="line">      myData.data[i - <span class="number">1</span>] = myData.data[i - <span class="number">2</span>] = myData.data[i - <span class="number">3</span>] = total</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.putImageData(myData, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br></pre></td></tr></table></figure><p>是拿到该画布上的所有像素点, 返回的格式是一个巨大的数组:</p><p>javascript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[255, 255, 0, 255, ...]</span><br></pre></td></tr></table></figure><p>四位为一个像素点, 分别对应R = 255, G = 255, B == 0, A == 255, 也就是说改点是一个透明度为1的纯黄色像素点,知道了这个后, 想弄成黑白滤镜就有了方向</p><p>我们还得知道一个小知识, 那就是, 当R,G,B值相同时会显示为灰色, 且数值越大越亮, 如255, 255, 255 为白色</p><p>所以我们可以将每项的元素点的R,G,B加起来除以三赋值给他们, 就实现了黑白滤镜, 如下</p><p>javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> total = (myData.data[i - <span class="number">1</span>] + myData.data[i - <span class="number">2</span>] + myData.data[i - <span class="number">3</span>]) / <span class="number">3</span></span><br><span class="line">myData.data[i - <span class="number">1</span>] = myData.data[i - <span class="number">2</span>] = myData.data[i - <span class="number">3</span>] = total</span><br></pre></td></tr></table></figure><p><code>ctx.putImageData(myData, 0, 0)</code>是将处理后的像素点又绘制到画布上</p><p>结果</p><p><img src="https://img.mrpzx.cn/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15786512848682.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是<code>canvas</code>对图片的一些操作能力, 另外水平有限, 写的不好请谅解</p><p>最后</p><p>写的真的有点晕, 最后有点潦草了</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1578661700865&di=68b36c83521bfc6f757facf81b172ac4&imgtype=0&src=http%3A%2F%2Fhbimg.b0.upaiyun.com%2Fc5d403de7d606fcfe802122809529c1ed5fda82816c6c-pF4icn_fw658" alt="img"></p><p><strong>文章作者:</strong> <a href="mailto:undefined">Mrpzx</a></p><p><strong>文章链接:</strong> <a href="http://blog.mrpzx.cn/2020/01/07/利用canvas玩转图片/" target="_blank" rel="noopener">http://blog.mrpzx.cn/2020/01/07/%E5%88%A9%E7%94%A8canvas%E7%8E%A9%E8%BD%AC%E5%9B%BE%E7%89%87/</a></p><p><strong>版权声明:</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="http://blog.mrpzx.cn/" target="_blank" rel="noopener">Mrpzx</a>！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;canvas&lt;/code&gt;是&lt;code&gt;H5&lt;/code&gt;中新加的一个标签&lt;/p&gt;
&lt;p&gt;html&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/09/hello-world/"/>
    <id>http://yoursite.com/2020/01/09/hello-world/</id>
    <published>2020-01-09T01:49:35.932Z</published>
    <updated>2020-01-08T07:24:13.913Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
